diff --git a/CMake/folly-deps.cmake b/CMake/folly-deps.cmake
index e0e02c0..823c395 100644
--- a/CMake/folly-deps.cmake
+++ b/CMake/folly-deps.cmake
@@ -125,9 +125,9 @@ if (SNAPPY_FOUND)
   list(APPEND FOLLY_LINK_LIBRARIES ${SNAPPY_LIBRARY})
 endif()
 
-find_package(LibDwarf)
-list(APPEND FOLLY_LINK_LIBRARIES ${LIBDWARF_LIBRARIES})
-list(APPEND FOLLY_INCLUDE_DIRECTORIES ${LIBDWARF_INCLUDE_DIRS})
+#find_package(LibDwarf)
+#list(APPEND FOLLY_LINK_LIBRARIES ${LIBDWARF_LIBRARIES})
+#list(APPEND FOLLY_INCLUDE_DIRECTORIES ${LIBDWARF_INCLUDE_DIRS})
 
 find_package(Libiberty)
 list(APPEND FOLLY_LINK_LIBRARIES ${LIBIBERTY_LIBRARIES})
diff --git a/CMakeLists.txt b/CMakeLists.txt
index fc9f563..c9fed14 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -152,6 +152,7 @@ REMOVE_MATCHES_FROM_LISTS(files hfiles
     "^${FOLLY_DIR}/logging/example/"
     "^${FOLLY_DIR}/(.*/)?test/"
     "^${FOLLY_DIR}/tools/"
+    "^${FOLLY_DIR}/experimental/exception_tracer/"
     "Benchmark.cpp$"
     "Test.cpp$"
 )
diff --git a/folly/Demangle.cpp b/folly/Demangle.cpp
index 1fe6c6f..2273536 100644
--- a/folly/Demangle.cpp
+++ b/folly/Demangle.cpp
@@ -29,7 +29,7 @@
 //  symbol basename. Unfortunately, the declarations are different. So including
 //  both headers in the same translation unit fails due to the two conflicting
 //  declarations. Since <demangle.h> includes <libiberty.h> we must be careful.
-#if __has_include(<demangle.h>)
+#if 0
 #pragma push_macro("HAVE_DECL_BASENAME")
 #define HAVE_DECL_BASENAME 1
 #include <demangle.h> // @manual
@@ -58,7 +58,7 @@ static constexpr auto cxxabi_demangle = static_cast<char* (*)(...)>(nullptr);
 //
 //  in contrast with cxxabi, where there are certainly other referenced symbols
 
-#if __has_include(<demangle.h>)
+#if 0
 
 static constexpr auto liberty_demangle = cplus_demangle_v3_callback;
 
diff --git a/folly/fibers/Fiber.cpp b/folly/fibers/Fiber.cpp
index 313c4b5..748edca 100644
--- a/folly/fibers/Fiber.cpp
+++ b/folly/fibers/Fiber.cpp
@@ -80,7 +80,7 @@ Fiber::Fiber(FiberManager& fiberManager)
 void Fiber::init(bool recordStackUsed) {
 // It is necessary to disable the logic for ASAN because we change
 // the fiber's stack.
-#ifndef FOLLY_SANITIZE_ADDRESS
+#ifndef FOLLY_LIBRARY_SANITIZE_ADDRESS
   recordStackUsed_ = recordStackUsed;
   if (UNLIKELY(recordStackUsed_ && !stackFilledWithMagic_)) {
     CHECK_EQ(
@@ -104,7 +104,7 @@ void Fiber::init(bool recordStackUsed) {
 }
 
 Fiber::~Fiber() {
-#ifdef FOLLY_SANITIZE_ADDRESS
+#ifdef FOLLY_LIBRARY_SANITIZE_ADDRESS
   if (asanFakeStack_ != nullptr) {
     fiberManager_.freeFakeStack(asanFakeStack_);
   }
@@ -116,7 +116,7 @@ Fiber::~Fiber() {
 void Fiber::recordStackPosition() {
   // For ASAN builds, functions may run on fake stack.
   // So we cannot get meaningful stack position.
-#ifndef FOLLY_SANITIZE_ADDRESS
+#ifndef FOLLY_LIBRARY_SANITIZE_ADDRESS
   int stackDummy;
   auto currentPosition = static_cast<size_t>(
       fiberStackLimit_ + fiberStackSize_ -
@@ -127,7 +127,7 @@ void Fiber::recordStackPosition() {
 }
 
 [[noreturn]] void Fiber::fiberFunc() {
-#ifdef FOLLY_SANITIZE_ADDRESS
+#ifdef FOLLY_LIBRARY_SANITIZE_ADDRESS
   fiberManager_.registerFinishSwitchStackWithAsan(
       nullptr, &asanMainStackBase_, &asanMainStackSize_);
 #endif
diff --git a/folly/fibers/Fiber.h b/folly/fibers/Fiber.h
index c83127a..9344096 100644
--- a/folly/fibers/Fiber.h
+++ b/folly/fibers/Fiber.h
@@ -193,7 +193,7 @@ class Fiber {
   folly::IntrusiveListHook globalListHook_; /**< list hook for global list */
   std::thread::id threadId_{};
 
-#ifdef FOLLY_SANITIZE_ADDRESS
+#ifdef FOLLY_LIBRARY_SANITIZE_ADDRESS
   void* asanFakeStack_{nullptr};
   const void* asanMainStackBase_{nullptr};
   size_t asanMainStackSize_{0};
diff --git a/folly/fibers/FiberManager.cpp b/folly/fibers/FiberManager.cpp
index a5b12fb..f3c5e27 100644
--- a/folly/fibers/FiberManager.cpp
+++ b/folly/fibers/FiberManager.cpp
@@ -33,7 +33,7 @@
 #include <folly/portability/Unistd.h>
 #include <folly/synchronization/SanitizeThread.h>
 
-#ifdef FOLLY_SANITIZE_ADDRESS
+#ifdef FOLLY_LIBRARY_SANITIZE_ADDRESS
 
 #ifndef _WIN32
 #include <dlfcn.h>
@@ -219,7 +219,7 @@ void FiberManager::FibersPoolResizer::run() {
   }
 }
 
-#ifdef FOLLY_SANITIZE_ADDRESS
+#ifdef FOLLY_LIBRARY_SANITIZE_ADDRESS
 
 void FiberManager::registerStartSwitchStackWithAsan(
     void** saveFakeStack, const void* stackBottom, size_t stackSize) {
@@ -334,7 +334,7 @@ static AsanUnpoisonMemoryRegionFuncPtr getUnpoisonMemoryRegionFunc() {
   return nullptr;
 }
 
-#endif // FOLLY_SANITIZE_ADDRESS
+#endif // FOLLY_LIBRARY_SANITIZE_ADDRESS
 
 // TVOS and WatchOS platforms have SIGSTKSZ but not sigaltstack
 #if defined(SIGSTKSZ) && !FOLLY_APPLE_TVOS && !FOLLY_APPLE_WATCHOS
diff --git a/folly/fibers/FiberManagerInternal-inl.h b/folly/fibers/FiberManagerInternal-inl.h
index 2da2815..ad53ef7 100644
--- a/folly/fibers/FiberManagerInternal-inl.h
+++ b/folly/fibers/FiberManagerInternal-inl.h
@@ -66,7 +66,7 @@ inline void FiberManager::ensureLoopScheduled() {
 inline void FiberManager::activateFiber(Fiber* fiber) {
   DCHECK_EQ(activeFiber_, (Fiber*)nullptr);
 
-#ifdef FOLLY_SANITIZE_ADDRESS
+#ifdef FOLLY_LIBRARY_SANITIZE_ADDRESS
   DCHECK(!fiber->asanMainStackBase_);
   DCHECK(!fiber->asanMainStackSize_);
   auto stack = fiber->getStack();
@@ -86,7 +86,7 @@ inline void FiberManager::activateFiber(Fiber* fiber) {
 inline void FiberManager::deactivateFiber(Fiber* fiber) {
   DCHECK_EQ(activeFiber_, fiber);
 
-#ifdef FOLLY_SANITIZE_ADDRESS
+#ifdef FOLLY_LIBRARY_SANITIZE_ADDRESS
   DCHECK(fiber->asanMainStackBase_);
   DCHECK(fiber->asanMainStackSize_);
 
diff --git a/folly/fibers/FiberManagerInternal.h b/folly/fibers/FiberManagerInternal.h
index 5838a15..1ca1073 100644
--- a/folly/fibers/FiberManagerInternal.h
+++ b/folly/fibers/FiberManagerInternal.h
@@ -602,7 +602,7 @@ class FiberManager : public ::folly::Executor {
   void runReadyFiber(Fiber* fiber);
   void remoteReadyInsert(Fiber* fiber);
 
-#ifdef FOLLY_SANITIZE_ADDRESS
+#ifdef FOLLY_LIBRARY_SANITIZE_ADDRESS
 
   // These methods notify ASAN when a fiber is entered/exited so that ASAN can
   // find the right stack extents when it needs to poison/unpoison the stack.
@@ -614,7 +614,7 @@ class FiberManager : public ::folly::Executor {
   void freeFakeStack(void* fakeStack);
   void unpoisonFiberStack(const Fiber* fiber);
 
-#endif // FOLLY_SANITIZE_ADDRESS
+#endif // FOLLY_LIBRARY_SANITIZE_ADDRESS
 
   bool alternateSignalStackRegistered_{false};
 
